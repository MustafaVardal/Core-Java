package kodlama.io.canditateSkills.dataAccess.concretes;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import kodlama.io.canditateSkills.dataAccess.abstracts.ProgrammingLanguageRepository;
import kodlama.io.canditateSkills.entities.ProgrammingLanguage;

public class InMemoryProgrammingLanguageRespository implements ProgrammingLanguageRepository {

	List<ProgrammingLanguage> programmingLanguages;

	public InMemoryProgrammingLanguageRespository() {
		programmingLanguages = new ArrayList<ProgrammingLanguage>();
		programmingLanguages.add(new ProgrammingLanguage(0, "C#"));
		programmingLanguages.add(new ProgrammingLanguage(1, "Java"));
		programmingLanguages.add(new ProgrammingLanguage(2, "Python"));
	}

	@Override
	public List<ProgrammingLanguage> getAll() {
		return programmingLanguages;
	}

	public void add(ProgrammingLanguage programmingLanguage) {

	}

	public boolean addElement(ProgrammingLanguage programmingLanguages) {
		for (ProgrammingLanguage element : programmingLanguages) {
			if (programmingLanguages.getName().equals(element.getName())) {
				System.out.println("Error: This element(" + element.getName() + ") already existed.");
				return false;
			}
		}
		programmingLanguages.add(programmingLanguages);
		return true;

	}

	@Override
	public void delete(int id) {
		programmingLanguages.remove(id);

	}

	@Override
	public void update(ProgrammingLanguage programmingLanguages) {
			programmingLanguage.set;
	}
	@Override
	public ProgrammingLanguage getOneById(int id) {
		for (ProgrammingLanguage language : programmingLanguages) {
			if (language.getId() == id) {
				return language;
			}
		}
			return  null;
			
	}
}
